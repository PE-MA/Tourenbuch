//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tourenbuch.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITourenbuchService")]
    public interface ITourenbuchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/TryConnection", ReplyAction="http://tempuri.org/ITourenbuchService/TryConnectionResponse")]
        bool TryConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/TryConnection", ReplyAction="http://tempuri.org/ITourenbuchService/TryConnectionResponse")]
        System.Threading.Tasks.Task<bool> TryConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllBooks", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllBooksResponse")]
        System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.TourBook> GetAllBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllBooks", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllBooksResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.TourBook>> GetAllBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllTours", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllToursResponse")]
        System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour> GetAllTours();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllTours", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllToursResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour>> GetAllToursAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllMountains", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllMountainsResponse")]
        System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Mountain> GetAllMountains();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllMountains", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllMountainsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Mountain>> GetAllMountainsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetToursInBook", ReplyAction="http://tempuri.org/ITourenbuchService/GetToursInBookResponse")]
        System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour> GetToursInBook(TourenbuchDatentypen.TourBook selectedTourBook);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetToursInBook", ReplyAction="http://tempuri.org/ITourenbuchService/GetToursInBookResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour>> GetToursInBookAsync(TourenbuchDatentypen.TourBook selectedTourBook);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/DeleteTour", ReplyAction="http://tempuri.org/ITourenbuchService/DeleteTourResponse")]
        void DeleteTour(TourenbuchDatentypen.Tour tour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/DeleteTour", ReplyAction="http://tempuri.org/ITourenbuchService/DeleteTourResponse")]
        System.Threading.Tasks.Task DeleteTourAsync(TourenbuchDatentypen.Tour tour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/DeleteBook", ReplyAction="http://tempuri.org/ITourenbuchService/DeleteBookResponse")]
        void DeleteBook(TourenbuchDatentypen.TourBook book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/DeleteBook", ReplyAction="http://tempuri.org/ITourenbuchService/DeleteBookResponse")]
        System.Threading.Tasks.Task DeleteBookAsync(TourenbuchDatentypen.TourBook book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/SaveBook", ReplyAction="http://tempuri.org/ITourenbuchService/SaveBookResponse")]
        TourenbuchDatentypen.TourBook SaveBook(TourenbuchDatentypen.TourBook book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/SaveBook", ReplyAction="http://tempuri.org/ITourenbuchService/SaveBookResponse")]
        System.Threading.Tasks.Task<TourenbuchDatentypen.TourBook> SaveBookAsync(TourenbuchDatentypen.TourBook book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/SaveTour", ReplyAction="http://tempuri.org/ITourenbuchService/SaveTourResponse")]
        TourenbuchDatentypen.Tour SaveTour(TourenbuchDatentypen.Tour tour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/SaveTour", ReplyAction="http://tempuri.org/ITourenbuchService/SaveTourResponse")]
        System.Threading.Tasks.Task<TourenbuchDatentypen.Tour> SaveTourAsync(TourenbuchDatentypen.Tour tour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllCategories", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllCategoriesResponse")]
        System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Category> GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllCategories", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Category>> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllToursFiltered", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllToursFilteredResponse")]
        System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour> GetAllToursFiltered(string searchText, System.Nullable<bool> summitReached, int categoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllToursFiltered", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllToursFilteredResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour>> GetAllToursFilteredAsync(string searchText, System.Nullable<bool> summitReached, int categoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllUsers", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllUsersResponse")]
        System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.User> GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITourenbuchService/GetAllUsers", ReplyAction="http://tempuri.org/ITourenbuchService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.User>> GetAllUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITourenbuchServiceChannel : Tourenbuch.ServiceReference1.ITourenbuchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TourenbuchServiceClient : System.ServiceModel.ClientBase<Tourenbuch.ServiceReference1.ITourenbuchService>, Tourenbuch.ServiceReference1.ITourenbuchService {
        
        public TourenbuchServiceClient() {
        }
        
        public TourenbuchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TourenbuchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TourenbuchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TourenbuchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool TryConnection() {
            return base.Channel.TryConnection();
        }
        
        public System.Threading.Tasks.Task<bool> TryConnectionAsync() {
            return base.Channel.TryConnectionAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.TourBook> GetAllBooks() {
            return base.Channel.GetAllBooks();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.TourBook>> GetAllBooksAsync() {
            return base.Channel.GetAllBooksAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour> GetAllTours() {
            return base.Channel.GetAllTours();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour>> GetAllToursAsync() {
            return base.Channel.GetAllToursAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Mountain> GetAllMountains() {
            return base.Channel.GetAllMountains();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Mountain>> GetAllMountainsAsync() {
            return base.Channel.GetAllMountainsAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour> GetToursInBook(TourenbuchDatentypen.TourBook selectedTourBook) {
            return base.Channel.GetToursInBook(selectedTourBook);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour>> GetToursInBookAsync(TourenbuchDatentypen.TourBook selectedTourBook) {
            return base.Channel.GetToursInBookAsync(selectedTourBook);
        }
        
        public void DeleteTour(TourenbuchDatentypen.Tour tour) {
            base.Channel.DeleteTour(tour);
        }
        
        public System.Threading.Tasks.Task DeleteTourAsync(TourenbuchDatentypen.Tour tour) {
            return base.Channel.DeleteTourAsync(tour);
        }
        
        public void DeleteBook(TourenbuchDatentypen.TourBook book) {
            base.Channel.DeleteBook(book);
        }
        
        public System.Threading.Tasks.Task DeleteBookAsync(TourenbuchDatentypen.TourBook book) {
            return base.Channel.DeleteBookAsync(book);
        }
        
        public TourenbuchDatentypen.TourBook SaveBook(TourenbuchDatentypen.TourBook book) {
            return base.Channel.SaveBook(book);
        }
        
        public System.Threading.Tasks.Task<TourenbuchDatentypen.TourBook> SaveBookAsync(TourenbuchDatentypen.TourBook book) {
            return base.Channel.SaveBookAsync(book);
        }
        
        public TourenbuchDatentypen.Tour SaveTour(TourenbuchDatentypen.Tour tour) {
            return base.Channel.SaveTour(tour);
        }
        
        public System.Threading.Tasks.Task<TourenbuchDatentypen.Tour> SaveTourAsync(TourenbuchDatentypen.Tour tour) {
            return base.Channel.SaveTourAsync(tour);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Category> GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Category>> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour> GetAllToursFiltered(string searchText, System.Nullable<bool> summitReached, int categoryID) {
            return base.Channel.GetAllToursFiltered(searchText, summitReached, categoryID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.Tour>> GetAllToursFilteredAsync(string searchText, System.Nullable<bool> summitReached, int categoryID) {
            return base.Channel.GetAllToursFilteredAsync(searchText, summitReached, categoryID);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.User> GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TourenbuchDatentypen.User>> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
    }
}
